{
  "hash": "35fdb23a02398917f72f76058c0a10e0",
  "result": {
    "markdown": "---\ntitle: \"Transforming data to make it fit for analysis\"\ndescription: \"Learn to use dplyr, pandas and siuba to filter rows & create and change columns\"\nauthor: \"Umair Durrani\"\nimage: \"imagee.png\"\nwarning: false\ncategories:\n  - visualization\n  - dplyr\n  - pandas\n  - siuba\n  - data-transformation\n  - mutate\n  - filter\n---\n\n\n\n\n\n::: {.panel-tabset group=\"language\"}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(janitor)\nlibrary(arrow)\n```\n:::\n\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom siuba.dply.vector import n, row_number, last\nfrom siuba import *\nfrom plotnine import *\nimport janitor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\Users\\umair\\ANACON~1\\envs\\homl3\\lib\\site-packages\\lazy_loader\\__init__.py:185: RuntimeWarning: subpackages can technically be lazily loaded, but it causes the package to be eagerly loaded even if it is already lazily loaded.So, you probably shouldn't use subpackages with this lazy feature.\nC:\\Users\\umair\\ANACON~1\\envs\\homl3\\lib\\site-packages\\lazy_loader\\__init__.py:185: RuntimeWarning: subpackages can technically be lazily loaded, but it causes the package to be eagerly loaded even if it is already lazily loaded.So, you probably shouldn't use subpackages with this lazy feature.\n```\n:::\n:::\n\n\n### Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing ParquetFiles, DataFrames, Tidier\n```\n:::\n\n:::\n\n\n\n\n::: {.panel-tabset group=\"language\"}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- arrow::read_parquet(\"data/df_raw.parquet\")\n\ndf <- janitor::clean_names(df) \n  \nknitr::kable(head(df))\n```\n\n::: {.cell-output-display}\n| vehicle_id| frame_id| total_frames|   global_time| local_x|  local_y| global_x| global_y| v_length| v_width| v_class|    v_vel|    v_acc| lane_id| preceding| following| space_headway| time_headway|\n|----------:|--------:|------------:|-------------:|-------:|--------:|--------:|--------:|--------:|-------:|-------:|--------:|--------:|-------:|---------:|---------:|-------------:|------------:|\n|          1|       12|          884| 1113433136100|  16.884| 52.74782|  6042842|  2133118|     14.3|     6.4|       2| 6.947704| 2.188889|       2|         0|         0|             0|            0|\n|          1|       13|          884| 1113433136200|  16.938| 53.45500|  6042842|  2133119|     14.3|     6.4|       2| 7.195818| 3.152102|       2|         0|         0|             0|            0|\n|          1|       14|          884| 1113433136300|  16.991| 54.19089|  6042842|  2133120|     14.3|     6.4|       2| 7.522104| 3.871618|       2|         0|         0|             0|            0|\n|          1|       15|          884| 1113433136400|  17.045| 54.96182|  6042842|  2133121|     14.3|     6.4|       2| 7.896343| 4.184370|       2|         0|         0|             0|            0|\n|          1|       16|          884| 1113433136500|  17.098| 55.77100|  6042842|  2133123|     14.3|     6.4|       2| 8.287402| 3.906572|       2|         0|         0|             0|            0|\n|          1|       17|          884| 1113433136600|  17.151| 56.61935|  6042842|  2133124|     14.3|     6.4|       2| 8.679462| 3.880959|       2|         0|         0|             0|            0|\n:::\n:::\n\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.read_parquet(\"data/df_raw.parquet\")\n\ndf.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Vehicle_ID', 'Frame_ID', 'Total_Frames', 'Global_Time', 'Local_X',\n       'Local_Y', 'Global_X', 'Global_Y', 'v_Length', 'v_Width', 'v_Class',\n       'v_Vel', 'v_Acc', 'Lane_ID', 'Preceding', 'Following', 'Space_Headway',\n       'Time_Headway'],\n      dtype='object')\n```\n:::\n\n```{.python .cell-code}\ndf = df.clean_names()\n\ndf.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['vehicle_id', 'frame_id', 'total_frames', 'global_time', 'local_x',\n       'local_y', 'global_x', 'global_y', 'v_length', 'v_width', 'v_class',\n       'v_vel', 'v_acc', 'lane_id', 'preceding', 'following', 'space_headway',\n       'time_headway'],\n      dtype='object')\n```\n:::\n:::\n\n\n\n### Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\ndf = DataFrame(load(\"data/df_raw.parquet\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1048575×18 DataFrame\n     Row │ Vehicle_ID  Frame_ID  Total_Frames  Global_Time    Local_X  Local_Y ⋯\n         │ Int64       Int64     Int64         Int64          Float64  Float64 ⋯\n─────────┼──────────────────────────────────────────────────────────────────────\n       1 │          1        12           884  1113433136100   16.884    52.74 ⋯\n       2 │          1        13           884  1113433136200   16.938    53.45\n       3 │          1        14           884  1113433136300   16.991    54.19\n       4 │          1        15           884  1113433136400   17.045    54.96\n       5 │          1        16           884  1113433136500   17.098    55.77 ⋯\n       6 │          1        17           884  1113433136600   17.151    56.61\n       7 │          1        18           884  1113433136700   17.204    57.50\n       8 │          1        19           884  1113433136800   17.257    58.43\n    ⋮    │     ⋮          ⋮           ⋮              ⋮           ⋮         ⋮   ⋱\n 1048569 │       2911      8586           731  1113433993500   53.639  1510.93 ⋯\n 1048570 │       2911      8587           731  1113433993600   53.666  1513.01\n 1048571 │       2911      8588           731  1113433993700   53.693  1515.0\n 1048572 │       2911      8589           731  1113433993800   53.719  1516.88\n 1048573 │       2911      8590           731  1113433993900   53.746  1518.68 ⋯\n 1048574 │       2911      8591           731  1113433994000   53.772  1520.39\n 1048575 │       2911      8592           731  1113433994100   53.799  1522.03\n                                             13 columns and 1048560 rows omitted\n```\n:::\n\n```{.julia .cell-code}\n\ndf = @chain df begin\n      @clean_names\n     end\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1048575×18 DataFrame\n     Row │ vehicle_i_d  frame_i_d  total_frames  global_time    local_x  local ⋯\n         │ Int64        Int64      Int64         Int64          Float64  Float ⋯\n─────────┼──────────────────────────────────────────────────────────────────────\n       1 │           1         12           884  1113433136100   16.884    52. ⋯\n       2 │           1         13           884  1113433136200   16.938    53.\n       3 │           1         14           884  1113433136300   16.991    54.\n       4 │           1         15           884  1113433136400   17.045    54.\n       5 │           1         16           884  1113433136500   17.098    55. ⋯\n       6 │           1         17           884  1113433136600   17.151    56.\n       7 │           1         18           884  1113433136700   17.204    57.\n       8 │           1         19           884  1113433136800   17.257    58.\n    ⋮    │      ⋮           ⋮           ⋮              ⋮           ⋮         ⋮ ⋱\n 1048569 │        2911       8586           731  1113433993500   53.639  1510. ⋯\n 1048570 │        2911       8587           731  1113433993600   53.666  1513.\n 1048571 │        2911       8588           731  1113433993700   53.693  1515.\n 1048572 │        2911       8589           731  1113433993800   53.719  1516.\n 1048573 │        2911       8590           731  1113433993900   53.746  1518. ⋯\n 1048574 │        2911       8591           731  1113433994000   53.772  1520.\n 1048575 │        2911       8592           731  1113433994100   53.799  1522.\n                                             13 columns and 1048560 rows omitted\n```\n:::\n\n```{.julia .cell-code}\n\nnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n18-element Vector{String}:\n \"vehicle_i_d\"\n \"frame_i_d\"\n \"total_frames\"\n \"global_time\"\n \"local_x\"\n \"local_y\"\n \"global_x\"\n \"global_y\"\n \"v_length\"\n \"v_width\"\n \"v_class\"\n \"v_vel\"\n \"v_acc\"\n \"lane_i_d\"\n \"preceding\"\n \"following\"\n \"space_headway\"\n \"time_headway\"\n```\n:::\n\n```{.julia .cell-code}\n\ndf = @chain df begin\n         @rename(vehicle_id = vehicle_i_d,\n                 frame_id = frame_i_d,\n                 lane_id = lane_i_d)\n     end\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1048575×18 DataFrame\n     Row │ vehicle_id  frame_id  total_frames  global_time    local_x  local_y ⋯\n         │ Int64       Int64     Int64         Int64          Float64  Float64 ⋯\n─────────┼──────────────────────────────────────────────────────────────────────\n       1 │          1        12           884  1113433136100   16.884    52.74 ⋯\n       2 │          1        13           884  1113433136200   16.938    53.45\n       3 │          1        14           884  1113433136300   16.991    54.19\n       4 │          1        15           884  1113433136400   17.045    54.96\n       5 │          1        16           884  1113433136500   17.098    55.77 ⋯\n       6 │          1        17           884  1113433136600   17.151    56.61\n       7 │          1        18           884  1113433136700   17.204    57.50\n       8 │          1        19           884  1113433136800   17.257    58.43\n    ⋮    │     ⋮          ⋮           ⋮              ⋮           ⋮         ⋮   ⋱\n 1048569 │       2911      8586           731  1113433993500   53.639  1510.93 ⋯\n 1048570 │       2911      8587           731  1113433993600   53.666  1513.01\n 1048571 │       2911      8588           731  1113433993700   53.693  1515.0\n 1048572 │       2911      8589           731  1113433993800   53.719  1516.88\n 1048573 │       2911      8590           731  1113433993900   53.746  1518.68 ⋯\n 1048574 │       2911      8591           731  1113433994000   53.772  1520.39\n 1048575 │       2911      8592           731  1113433994100   53.799  1522.03\n                                             13 columns and 1048560 rows omitted\n```\n:::\n:::\n\n:::\n\n\n\n::: {.panel-tabset group=\"language\"}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |> \n  dplyr::group_by(frame_id) |>  # grouping by frame id\n  dplyr::mutate(preceding_local_y = local_y[match(preceding, vehicle_id)],\n                preceding_length = v_length[match(preceding, vehicle_id)],\n                preceding_width = v_width[match(preceding, vehicle_id)],\n                preceding_class= v_class[match(preceding, vehicle_id)],\n                preceding_vel = v_vel[match(preceding, vehicle_id)],\n                preceding_acc = v_acc[match(preceding, vehicle_id)]) |> \n  dplyr::ungroup()\n```\n:::\n\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = df.merge(\n  df.loc[:, ['frame_id', 'vehicle_id', 'local_y', 'v_length',\n            'v_width', 'v_class', 'v_vel', 'v_acc']] , \n              left_on = ['frame_id', 'preceding'], \n              right_on = ['frame_id', 'vehicle_id'], how = 'left', \n              suffixes=['', '_preceding']\n              )\n              \ndf = df.drop(['vehicle_id_preceding'], axis = 'columns')\n              \ndf.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['vehicle_id', 'frame_id', 'total_frames', 'global_time', 'local_x',\n       'local_y', 'global_x', 'global_y', 'v_length', 'v_width', 'v_class',\n       'v_vel', 'v_acc', 'lane_id', 'preceding', 'following', 'space_headway',\n       'time_headway', 'local_y_preceding', 'v_length_preceding',\n       'v_width_preceding', 'v_class_preceding', 'v_vel_preceding',\n       'v_acc_preceding'],\n      dtype='object')\n```\n:::\n:::\n\n\nRename the columns for `preceding` vehicles to match the column names with `R`:\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = (\n  df \n      >> rename(preceding_local_y = _.local_y_preceding,\n                 preceding_v_length =  _.v_length_preceding,\n                 preceding_v_width = _.v_width_preceding,\n                 preceding_v_class = _.v_class_preceding,\n                 preceding_v_vel = _.v_vel_preceding,\n                 preceding_v_acc = _.v_acc_preceding)\n     \n     )\n     \ndf.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['vehicle_id', 'frame_id', 'total_frames', 'global_time', 'local_x',\n       'local_y', 'global_x', 'global_y', 'v_length', 'v_width', 'v_class',\n       'v_vel', 'v_acc', 'lane_id', 'preceding', 'following', 'space_headway',\n       'time_headway', 'preceding_local_y', 'preceding_v_length',\n       'preceding_v_width', 'preceding_v_class', 'preceding_v_vel',\n       'preceding_v_acc'],\n      dtype='object')\n```\n:::\n:::\n\n\n\n\n### Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\ndf = leftjoin(\n           df,\n           df[:, [:frame_id, :vehicle_id, :local_y, :v_length, :v_width, :v_class, :v_vel, :v_acc]],\n           on = [:frame_id => :frame_id, :preceding => :vehicle_id],\n           makeunique = true, \n           renamecols = \"\" => \"_preceding\"\n       )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1048575×24 DataFrame\n     Row │ vehicle_id  frame_id  total_frames  global_time    local_x  local_y ⋯\n         │ Int64       Int64     Int64         Int64          Float64  Float64 ⋯\n─────────┼──────────────────────────────────────────────────────────────────────\n       1 │         11        57           864  1113433140600   17.924   68.918 ⋯\n       2 │         11        58           864  1113433140700   17.827   69.534\n       3 │         11        59           864  1113433140800   17.73    70.158\n       4 │         11        60           864  1113433140900   17.632   70.792\n       5 │         11        61           864  1113433141000   17.533   71.434 ⋯\n       6 │         11        62           864  1113433141100   17.433   72.083\n       7 │         11        63           864  1113433141200   17.333   72.737\n       8 │         11        64           864  1113433141300   17.233   73.398\n    ⋮    │     ⋮          ⋮           ⋮              ⋮           ⋮        ⋮    ⋱\n 1048569 │       2911      8381           731  1113433973000   61.556  928.234 ⋯\n 1048570 │       2911      8382           731  1113433973100   60.848  931.051\n 1048571 │       2911      8383           731  1113433973200   60.721  933.884\n 1048572 │       2911      8384           731  1113433973300   60.667  936.733\n 1048573 │       2911      8385           731  1113433973400   60.779  939.596 ⋯\n 1048574 │       2911      8386           731  1113433973500   60.97   942.472\n 1048575 │       2911      8387           731  1113433973600   60.618  945.36\n                                             19 columns and 1048560 rows omitted\n```\n:::\n\n```{.julia .cell-code}\n\nnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n24-element Vector{String}:\n \"vehicle_id\"\n \"frame_id\"\n \"total_frames\"\n \"global_time\"\n \"local_x\"\n \"local_y\"\n \"global_x\"\n \"global_y\"\n \"v_length\"\n \"v_width\"\n ⋮\n \"following\"\n \"space_headway\"\n \"time_headway\"\n \"local_y_preceding\"\n \"v_length_preceding\"\n \"v_width_preceding\"\n \"v_class_preceding\"\n \"v_vel_preceding\"\n \"v_acc_preceding\"\n```\n:::\n:::\n\n\nRename the columns for `preceding` vehicles to match the column names with `R`:\n\n::: {.cell}\n\n```{.julia .cell-code}\ndf = @chain df begin\n         @rename(preceding_local_y = local_y_preceding,\n                 preceding_v_length =  v_length_preceding,\n                 preceding_v_width = v_width_preceding,\n                 preceding_v_class = v_class_preceding,\n                 preceding_v_vel = v_vel_preceding,\n                 preceding_v_acc = v_acc_preceding)\n     end\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1048575×24 DataFrame\n     Row │ vehicle_id  frame_id  total_frames  global_time    local_x  local_y ⋯\n         │ Int64       Int64     Int64         Int64          Float64  Float64 ⋯\n─────────┼──────────────────────────────────────────────────────────────────────\n       1 │         11        57           864  1113433140600   17.924   68.918 ⋯\n       2 │         11        58           864  1113433140700   17.827   69.534\n       3 │         11        59           864  1113433140800   17.73    70.158\n       4 │         11        60           864  1113433140900   17.632   70.792\n       5 │         11        61           864  1113433141000   17.533   71.434 ⋯\n       6 │         11        62           864  1113433141100   17.433   72.083\n       7 │         11        63           864  1113433141200   17.333   72.737\n       8 │         11        64           864  1113433141300   17.233   73.398\n    ⋮    │     ⋮          ⋮           ⋮              ⋮           ⋮        ⋮    ⋱\n 1048569 │       2911      8381           731  1113433973000   61.556  928.234 ⋯\n 1048570 │       2911      8382           731  1113433973100   60.848  931.051\n 1048571 │       2911      8383           731  1113433973200   60.721  933.884\n 1048572 │       2911      8384           731  1113433973300   60.667  936.733\n 1048573 │       2911      8385           731  1113433973400   60.779  939.596 ⋯\n 1048574 │       2911      8386           731  1113433973500   60.97   942.472\n 1048575 │       2911      8387           731  1113433973600   60.618  945.36\n                                             19 columns and 1048560 rows omitted\n```\n:::\n\n```{.julia .cell-code}\n     \nnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n24-element Vector{String}:\n \"vehicle_id\"\n \"frame_id\"\n \"total_frames\"\n \"global_time\"\n \"local_x\"\n \"local_y\"\n \"global_x\"\n \"global_y\"\n \"v_length\"\n \"v_width\"\n ⋮\n \"following\"\n \"space_headway\"\n \"time_headway\"\n \"preceding_local_y\"\n \"preceding_v_length\"\n \"preceding_v_width\"\n \"preceding_v_class\"\n \"preceding_v_vel\"\n \"preceding_v_acc\"\n```\n:::\n:::\n\n:::\n\n\n\n\n::: {.panel-tabset group=\"language\"}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |>\n  select(-c(total_frames, starts_with(\"global\"), following), global_time) |> # Keeping the desired columns only\n mutate(across(\n    .cols = c(starts_with(\"local\"), starts_with(\"v_\"), space_headway, starts_with(\"preceding\"), -preceding, -preceding_class, -v_class),\n    .fns = ~ round(.x * .3048, 2)\n  )) |> # Convert to metric units\n  mutate(across(\n    .cols = c(vehicle_id, v_class, lane_id, preceding, preceding_class),\n    .fns = ~ as.factor(.x)\n  )) # Convert a few columns to factor type\n```\n:::\n\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = (\n  df \n  >> select(-_[_.total_frames, _.startswith('global'), _.following], \n  _.global_time) # Keeping the desired columns only\n    )\n    \n### converting to metric units\ncols_to_convert_to_metric = ['local_x', 'local_y', 'v_length', 'v_width', \n        'v_vel', 'v_acc', 'space_headway', 'preceding_local_y',\n        'preceding_v_length', 'preceding_v_width', 'preceding_v_vel',\n       'preceding_v_acc']\n\ndf[cols_to_convert_to_metric] = df[cols_to_convert_to_metric].apply(lambda x: x * .3048).round(2)\n\n\n\n## change the data type to categorical\ncols_to_convert_to_categorical = ['vehicle_id', 'v_class', 'lane_id', \n                             'preceding', 'preceding_v_class']\nfor col in cols_to_convert_to_categorical:\n    df[col] = df[col].astype('str',copy=False)\n```\n:::\n\n:::\n\n\n\n\n::: {.panel-tabset group=\"language\"}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |> \n  mutate(actual_time = as.POSIXct(global_time/1000, origin = \"1970-01-01\", \n                                  tz=\"America/Los_Angeles\")) |>\n  select(-global_time)\n```\n:::\n\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\ndf['actual_time'] = pd.to_datetime(df['global_time'] / 1000, \n                                    unit='s', origin='1970-01-01', utc=True)\ndf['actual_time'] = df['actual_time'].dt.tz_convert('America/Los_Angeles')\n\ndf = df.drop(['global_time'], axis = 'columns')\n\nprint(df.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['vehicle_id', 'frame_id', 'local_x', 'local_y', 'v_length', 'v_width',\n       'v_class', 'v_vel', 'v_acc', 'lane_id', 'preceding', 'space_headway',\n       'time_headway', 'preceding_local_y', 'preceding_v_length',\n       'preceding_v_width', 'preceding_v_class', 'preceding_v_vel',\n       'preceding_v_acc', 'actual_time'],\n      dtype='object')\n```\n:::\n:::\n\n:::\n\n\n\n\n::: {.panel-tabset group=\"language\"}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\n## Time space diagram\n# ggplot(data = df |> \n#          filter(lane_id %in% c(1,2,3))) +\n#   geom_path(aes(x = actual_time, \n#                 y = local_y, \n#                 color = v_vel,\n#                 group = vehicle_id), alpha = 0.5) +\n#   scale_color_gradient(low = \"red\", high = \"green\") +\n#   facet_grid(lane_id ~ ., labeller = \"label_both\") +\n#   labs(x = \"Time (HH:MM)\",\n#        y = \"Longitudinal position\",\n#        color = \"Speed (m/s)\") +\n#   theme_minimal()\n```\n:::\n\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n## Time space diagram\n\ndf_123 = (\n  df  \n      >> filter(_.lane_id.isin([\"1\", \"2\", \"3\"]))\n)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nC:\\Users\\umair\\ANACON~1\\envs\\homl3\\lib\\site-packages\\pandas\\core\\algorithms.py:522: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.\nSee https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)\n```\n:::\n\n```{.python .cell-code}\n(\n  ggplot(data = df_123) +\n  geom_path(aes(x = 'actual_time',\n                y = 'local_y',\n                color = 'v_vel',\n                group = 'vehicle_id'), alpha = 0.5) +\n  scale_color_gradient(low = \"red\", high = \"green\") +\n  facet_grid('lane_id ~ .', labeller = \"label_both\") +\n  labs(x = \"Time (HH:MM)\",\n       y = \"Longitudinal position\",\n       color = \"Speed (m/s)\") +\n  theme_minimal()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n\n::: {.cell-output-display}\n![](data_transformation_files/figure-html/unnamed-chunk-18-1.png){width=614}\n:::\n:::\n\n\n\n### Julia\n\n::: {.cell}\n\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
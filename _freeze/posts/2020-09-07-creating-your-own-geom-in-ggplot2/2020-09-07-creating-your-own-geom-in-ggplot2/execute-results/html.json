{
  "hash": "fd9ac60338640c56d85b60d4ab7676e8",
  "result": {
    "markdown": "---\ntitle: Draw cars with ggplot2\ndate: '2020-09-07'\nimage: \"car4_rear3.png\"\n---\n\n\n\n\n## Credit: \nThanks to [BrodieG](https://twitter.com/brodiegaslam?lang=en) for answering my [stackoverflow question](https://stackoverflow.com/questions/22159087/is-it-possible-to-draw-diagrams-in-r) about drawing diagrams in R.  \n\n# I wanted to draw cars \n\nI wanted to plot a car following another car using `ggplot2`. There are `geom_rect` and `geom_tile` that could do that, but I wanted to give the rectangles a 'car' look. So, I posted a question on stackoverflow (linked above). The answer showed how to do that by creating a `geom_car`\n\n## Creating `geom_car`\n\nCreating a new geom in `ggplot2` is much more complicated then using the `ggplot2` interface. The official `gpplot2` book, [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/), says the following:  \n\n>  When making the jump from user to developer, it is common to encounter frustrations because the nature of the ggplot2 interface is very different to the structure of the underlying machinery that makes it work  \n\nAnd I completely agree. The [chapter](https://ggplot2-book.org/internals.html) that the above quote is from explains that `ggplot2` uses the `ggproto` class system to create new objects such as geoms.    \n\nThe following shows the use of `ggproto` that creates the `geom_car`. Again, the code is not mine but provided by Brodie G (thanks!).   \n\nFirst, load libraries.\n\n### Load Libraries\n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/load_libs_1a19182f20bb74c0e1e75680a65c2f2a'}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages( library(tidyverse) )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.0.5\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.0.5\n```\n:::\n\n```{.r .cell-code}\nsuppressPackageStartupMessages( library(here) )\nsuppressPackageStartupMessages( library(readr) )\n```\n:::\n\n\n\n### Load data\n\nI am using a dataset of 2 cars. The *Following car* is approaching a *Lead car* from a large distance. The Lead car is stopped. The dataset contains the x and y coordinates of the centroid of cars and their sizes.   \n\n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/load_data_f066411b12206f46bbed3d1f3aa4beb2'}\n\n```{.r .cell-code}\ndf <- read_csv(\"driver_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n-- Column specification --------------------------------------------------------\ncols(\n  Time_s = col_double(),\n  ED_x_m = col_double(),\n  ED_y_m = col_double(),\n  LV_x_m = col_double(),\n  LV_y_m = col_double(),\n  LV_length_m = col_double(),\n  LV_width_m = col_double(),\n  visual_angle_W = col_double(),\n  visual_angle_H = col_double(),\n  tau = col_double(),\n  ED_length_m = col_double(),\n  ED_width_m = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 12\n  Time_s ED_x_m ED_y_m LV_x_m LV_y_m LV_length_m LV_widt~1 visua~2 visua~3   tau\n   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>       <dbl>     <dbl>   <dbl>   <dbl> <dbl>\n1      1  4341. -8921.  3991. -7732.        5.39      2.29 0.00185 0.00128  55.1\n2      2  4335. -8899.  3991. -7732.        5.39      2.29 0.00189 0.00130  52.8\n3      3  4329. -8877.  3991. -7732.        5.39      2.29 0.00193 0.00133  50.7\n4      4  4322. -8854.  3991. -7732.        5.39      2.29 0.00197 0.00136  48.6\n5      5  4315. -8831.  3991. -7732.        5.39      2.29 0.00201 0.00138  46.9\n6      6  4308. -8808.  3991. -7732.        5.39      2.29 0.00205 0.00141  45.3\n# ... with 2 more variables: ED_length_m <dbl>, ED_width_m <dbl>, and\n#   abbreviated variable names 1: LV_width_m, 2: visual_angle_W,\n#   3: visual_angle_H\n# i Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\n### Coordinates plot  \n\nFollowing plot shows that in the original data format, the Following car moves up and left towards the lead car.\n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-1_67828dbdb8f8b7880023e41d0a9c90f9'}\n\n```{.r .cell-code}\nggplot(data = df,\n       aes(x = ED_x_m, y = ED_y_m)) +\n  geom_line(aes(color = \"Following car\"))\n```\n\n::: {.cell-output-display}\n![](2020-09-07-creating-your-own-geom-in-ggplot2_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n### Step 1: Create a car image with no fill color\n\nThe stackoverflow answer comes with a car image, but I wanted to experiment with my own image. So, I created one with no fill color. This was important to enable the `fill` method in `geom_car`. Then it was read by the `png::readPNG` method:  \n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/load_car_image_2591575d41737fc15c145805e24911c9'}\n\n```{.r .cell-code}\ncar.raster <- png::readPNG(\"car4.png\")\n\nstr(car.raster)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:238, 1:505, 1:4] 0 0.184 0.184 0.184 0.184 ...\n```\n:::\n:::\n\n\n### Step 2: Create a graphical object (`grob`) from the image  \n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/create_grob_4733158bd19c845578200ae8dc603262'}\n\n```{.r .cell-code}\n# Generate a car 'grob' using a baseline PNG\n\n# The `grid` grob actually responsible for rendering our car, \n# combines our transparent car elements with a background rectangle\n# for color/fill.\n\ncarGrob <- function(x, y, length, width, gp) {\n  grid::grobTree(\n    grid::rectGrob(\n      x, y, hjust=.5, height=width, width=length,\n      gp = gp\n    ),\n    grid::rasterGrob(\n      car.raster, x=x, y=y, hjust=.5, height=width, width=length\n    ) ) }\n```\n:::\n\n\n\n### Step 3: Map the data to the grob using `ggproto`\n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-2_7bbb853e62c2a8a534eb7efff7f254f8'}\n\n```{.r .cell-code}\n# The `ggproto` object that maps our data to the `grid` grobs\n\nGeomCar <- ggplot2::ggproto(\"GeomCar\", ggplot2::Geom,\n                            # Generate grobs from the data, we have to reconvert length/width so\n                            # that the transformations persist\n                            \n                            draw_panel=function(self, data, panel_params, coords) {\n                              with(\n                                coords$transform(data, panel_params),\n                                carGrob(\n                                  x, y, length=xmax-xmin, width=ymax-ymin,\n                                  gp=grid::gpar(\n                                    col = colour, fill = alpha(fill, alpha),\n                                    lwd = size * .pt, lty = linetype, lineend = \"butt\"\n                                  ) ) ) },\n                            # Convert data to coordinates that will get transformed (length/width don't\n                            # normally).\n                            \n                            setup_data=function(self, data, params) {\n                              transform(data,\n                                        xmin = x - length / 2, xmax = x + length / 2,\n                                        ymin = y - width / 2, ymax = y + width / 2\n                              ) },\n                            # Required and default aesthetics\n                            \n                            required_aes=c(\"x\", \"y\", \"length\", \"width\"),\n                            default_aes = aes(\n                              colour = NA, fill = \"grey35\", size = 0.5, linetype = 1, alpha = NA\n                            ),\n                            # Use the car grob in the legend\n                            \n                            draw_key = function(data, params, size) {\n                              with(\n                                data,\n                                carGrob(\n                                  0.5, 0.5, length=.75, width=.5,\n                                  gp = grid::gpar(\n                                    col = colour, fill = alpha(fill, alpha),\n                                    lwd = size * .pt, lty = linetype, lineend = \"butt\"\n                                  ) ) ) }\n)\n```\n:::\n\n\n### Step 4: Create the external interface i.e. the `geom_car` layer\n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/external_interface_4ed4a8d55efd1d1571d3eac81f2fecc0'}\n\n```{.r .cell-code}\n# External interface\n\ngeom_car <- function(\n  mapping=NULL, data=NULL, ..., inherit.aes=TRUE, show.legend=NA\n) {\n  layer(\n    data=data, mapping=mapping, geom=GeomCar, position=\"identity\",\n    stat=\"identity\", show.legend = show.legend, inherit.aes = inherit.aes,\n    params=list(...)\n  )\n}\n```\n:::\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-3_f443c6fdf2cc7d0566f632fd0c1937fc'}\n\n:::\n\n\n\n## Plotting the cars\n\nI can now use `geom_car` to plot the cars. Since the coordinates change every second (see the `Time_s` column above), I need to filter for one time only. So, I choose `Time_s == 49`.\n\n### Attempt 1 to plot cars \n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-4_d607f3aa919992f1bd036bb6a03727a5'}\n\n```{.r .cell-code}\nggplot(df %>% filter(Time_s == 49) ) +\n  geom_car(aes(x=ED_x_m, y=ED_y_m, \n               length=ED_length_m, width=ED_width_m, \n               fill=\"ed\")) +\n  geom_text(aes(x=ED_x_m, y=ED_y_m+5), \n            label = \"Following Car\") +\n  \n  geom_car(aes(x=LV_x_m, y=LV_y_m, \n               length=LV_length_m, width=LV_width_m, \n               fill=\"lv\")) +\n  geom_text(aes(x=LV_x_m, y=LV_y_m+5), \n            label = \"Lead Car\\n(stationary)\") +\n\n  coord_equal(ratio = 0.7) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](2020-09-07-creating-your-own-geom-in-ggplot2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThis does not look right. The Following car seems to be ahead of the lead car. Also, due to the elongated scale, the Following car appears to be in a different lane. The main reason is the unusual coordinates. The x coordinates decrease as the Following car gets closer to the lead car.  \n\nI can fix this by scaling: subtracting the x coordinates from the largest x coordinate in the data.\n\n### Attemp 2: Adjust the coordinates and plot again\n\n#### Adjust coordinates:  \n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-5_f2afa05c5ab48ef9183cc5ccd993a3fd'}\n\n```{.r .cell-code}\nfirst_ed_x_coord <- df %>% pull(ED_x_m) %>% range() %>% tail(1)\n\ndf <- df %>% \n  mutate(\n    ED_x_m_a = abs(ED_x_m - first_ed_x_coord),\n    LV_x_m_a = abs(LV_x_m - first_ed_x_coord)\n         )\n```\n:::\n\n\n\n#### Plot:  \n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-6_aa14a39924fb6aade9fcd67bdafa21d9'}\n\n```{.r .cell-code}\nggplot(df %>% filter(Time_s == 49) ) +\n  geom_car(aes(x=ED_x_m_a, y=ED_y_m, \n               length=ED_length_m, width=ED_width_m, \n               fill=\"ed\")) +\n  geom_text(aes(x=ED_x_m_a, y=ED_y_m+5), \n            label = \"Following Car\") +\n  \n  geom_car(aes(x=LV_x_m_a, y=LV_y_m, \n               length=LV_length_m, width=LV_width_m, \n               fill=\"lv\")) +\n  geom_text(aes(x=LV_x_m_a, y=LV_y_m+5), \n            label = \"Lead Car\\n(stationary)\") +\n\n  coord_equal(ratio = 0.7) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](2020-09-07-creating-your-own-geom-in-ggplot2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis is better. Now, to fix the problem of the elongated y coordinate, I can fix them to a single value, because I'm mainly interested in the movement along the x-axis. But note that this might not be a good idea if there is a large change in y coordinate (e.g. in a lane change).\n\n### Attempt 3 - Fixing y coordinate  \n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-7_47570826b4a7f8f0341c7e0fb0dc0b68'}\n\n```{.r .cell-code}\ncar_plot <- ggplot(df %>% filter(Time_s == 49) ) +\n  geom_car(aes(x=ED_x_m_a, y=300, \n               length=ED_length_m, width=ED_width_m, \n               fill=\"ed\")) +\n  geom_text(aes(x=ED_x_m_a, y=300+5), \n            label = \"Following Car\") +\n  \n  geom_car(aes(x=LV_x_m_a, y=300, \n               length=LV_length_m, width=LV_width_m, \n               fill=\"lv\")) +\n  geom_text(aes(x=LV_x_m_a, y=300+5), \n            label = \"Lead Car\\n(stationary)\") +\n  theme_void() +\n  coord_equal(ratio = 1) +\n  theme(legend.position = \"none\",\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank())\n\ncar_plot\n```\n\n::: {.cell-output-display}\n![](2020-09-07-creating-your-own-geom-in-ggplot2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n  \nThis looks much better.  :D\n\n## Car Rear View  \n\nI also created a `geom_car_rear` by using a different image (car rear created in powerpoint). Following plots the car rear at time = 49 s.\n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-8_9debd121cf812660470e72211ba59bea'}\n\n```{.r .cell-code}\nggplot(df %>% filter(Time_s == 49)) +\n  geom_car_rear(aes(x=0, y=0, length=visual_angle_W,\n               width=visual_angle_H), fill=\"black\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](2020-09-07-creating-your-own-geom-in-ggplot2_files/figure-html/unnamed-chunk-8-1.png){width=192}\n:::\n:::\n\n\n\n\n# Bonus: Animation   \n\nSince I have data across time, I can also animate my cars using the fantastic `gganimate` package. Here goes:  \n\n\n\n::: {.cell hash='2020-09-07-creating-your-own-geom-in-ggplot2_cache/html/unnamed-chunk-9_9709865dec7cf659e3cadc6de3645615'}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\nggplot(df ) +\n  geom_car(aes(x=ED_x_m_a, y=300, \n               length=ED_length_m, width=ED_width_m, \n               fill=\"ed\")) +\n  geom_text(aes(x=ED_x_m_a, y=300+5), \n            label = \"Following Car\") +\n  \n  geom_car(aes(x=LV_x_m_a, y=300, \n               length=LV_length_m, width=LV_width_m, \n               fill=\"lv\")) +\n  geom_text(aes(x=LV_x_m_a, y=300+5), \n            label = \"Lead Car\\n(stationary)\") +\n  theme_void() +\n  coord_equal(ratio = 1) +\n  theme(legend.position = \"none\",\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank())  +\n  transition_time(Time_s) +\n  view_follow()\n```\n\n::: {.cell-output-display}\n![](2020-09-07-creating-your-own-geom-in-ggplot2_files/figure-html/unnamed-chunk-9-1.gif)\n:::\n:::\n\n\nThis animation has one limitation. The lead car also appears to be moving. Maybe putting a vertcial line or using `gganimate::view_step()` might solve this problem. I'd perhaps explore that in a different post.  \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
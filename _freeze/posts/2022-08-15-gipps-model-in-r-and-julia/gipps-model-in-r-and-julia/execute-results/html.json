{
  "hash": "c4b624db3eb9e0366cb740171eb08a57",
  "result": {
    "markdown": "---\ntitle: \"Gipps Model in R, Rcpp, and Julia\"\ndescription: \"Race against time\"\nformat: \n  html:\n    page-layout: full\n    toc-location: left\nimage: \"carfollow.png\"\ncache: true\nwarning: false\ndate: \"2022-08-15\"\nbibliography: references.bib\n---\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-1_b311118ba40e4c8a646b7d8012b472e6'}\n\n:::\n\n\n\n\n## Introduction\n\nCar-following behaviour refers to the motion of a vehicle that follows another vehicle in the same lane. Generally, car-following models are used in simulation software that provide other models as well (e.g., lane change model). However, to understand the outputs of a model, it is a good idea to run the model in a programming environment in isolation. This blog post is about running a car-following model - Gipps car-following model [@gipps1981]- in `R` and `Julia` programming languages.   \n\n \nThe equation for the Gipps model is as follows. You can learn more about the model in this [wikipedia article](https://en.wikipedia.org/wiki/Gipps%27_model).   \n\n\n\n$$\nv_n(t+\\tau) = \\mbox{min} \\left\\{v_n(t) + 2.5 a_n\\tau (1-v_n(t)/V_n){(0.025+v_n(t)/V_n)}^{1/2}, \\\\b_n\\tau+\\sqrt{b_n^2\\tau^2 -b_n [ 2[x_{n-1}(t)-s_{n-1}-x_n(t)] - v_n(t)\\tau- v_{n-1}(t)^2/\\hat{b}]}\\right\\}\n$$\n\n\nIn the following sections, I will define and apply the functions for Gipps model in both `R` and `Julia`. `Julia` is a [fast programming language](https://julialang.org/) and could be a good environment to implement car-following models for numerical simulations and calibration. But I am pretty new to using `Julia`, so I write `R` first and then convert the syntax to `Julia`. You will see side by side code for both.\n\n\n## Load libraries\n\n\n::: {layout=\"[[40,-5,40]]\"}\n### R\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-2_6382cd16e985ccf4628ea2600bf141f6'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(microbenchmark)\n```\n:::\n\n\n### Julia\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-3_78d7fbfa997b343ce0d7cf91983fc715'}\n\n```{.julia .cell-code}\nusing CSV\nusing DataFrames\nusing BenchmarkTools\n```\n:::\n\n:::\n\n## Load Data\n\nI have a dataset in a csv file that contains the positions and speeds of a car following another car. I load this csv file separately in both `R` and `Julia`\n\n::: {layout=\"[[40,-5,40]]\"}\n### R\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-4_b55d743e02acfe9a1df597b449e5fafd'}\n\n```{.r .cell-code}\ndfn1_r <- read_csv(\"dfn1.csv\") %>% select(-X1)\n\nhead(dfn1_r, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 9\n  Vehicle.ID  Time Local.Y PrecVehLocalY  svel PrecVe~1       dV frspa~2 PrecV~3\n       <dbl> <dbl>   <dbl>         <dbl> <dbl>    <dbl>    <dbl>   <dbl>   <dbl>\n1         11   0      50.2          66.2  4.42     4.42 -0.00292    11.6    4.36\n2         11   0.1    50.6          66.6  4.42     4.42 -0.00103    11.6    4.36\n3         11   0.2    51.1          67.1  4.42     4.42  0.00108    11.6    4.36\n# ... with abbreviated variable names 1: PrecVehVel, 2: frspacing,\n#   3: PrecVehLength\n```\n:::\n:::\n\n\n### Julia\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-5_34cd4e53f1110454a8894adf87ab76d4'}\n\n```{.julia .cell-code}\ndfn1_julia = DataFrame(CSV.File(\"dfn1.csv\"));\n\ndfn1_julia = select!(dfn1_julia, Not(:Column1));\n\nfirst(dfn1_julia, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3×9 DataFrame\n Row │ Vehicle.ID  Time     Local.Y  PrecVehLocalY  svel     PrecVehVel  dV    ⋯\n     │ Int64       Float64  Float64  Float64        Float64  Float64     Float ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │         11      0.0  50.2051        66.1681  4.42008     4.423    -0.00 ⋯\n   2 │         11      0.1  50.6473        66.6105  4.42202     4.42305  -0.00\n   3 │         11      0.2  51.0897        67.0528  4.42416     4.42308   0.00\n                                                               3 columns omitted\n```\n:::\n:::\n\n:::\n\n\n## Defining the function for Gipps Model\n\nFollowing is my implementation of functions for the Gipps model. I won't go into the details of each line in the functions. Feel free to reach out if you have any questions/suggestions to improve these functions.  \n\nNote that I also implemented another function in `R` where I re-wrote the `for loop` as a function in `Rcpp`. Again, the reason is to speed up the calculations.\n\n::: panel-tabset\n### R\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-6_b749d2502748bc3e1145f4c46caf79cf'}\n\n```{.r .cell-code}\nsimulate_gipps_r <- function(resolution, N, dfn1,\n                             xn1, vn1, xn_first, vn_first, ln, an,\n                             Vn, tau, bn_const, bcap) {\n  ####### Time #############################################\n\n  # Last time frame of the simulation:\n  last_time <- (nrow(dfn1) - 1) * resolution\n\n  # Time vector:\n  Time <- seq(from = 0, to = last_time, by = resolution)\n\n  # Length of the Time vector\n  time_length <- length(Time)\n\n\n\n  list_of_N_veh <- vector(mode = \"list\", length = N)\n\n\n\n\n\n  for (n in seq_along(list_of_N_veh)) {\n\n    ####### Assign names to Lead Vehicle Parameters ##########\n\n    if (n == 1L) {\n\n      # Lead vehicle position\n      xn1 <- dfn1[[xn1]]\n\n      # Lead vehicle speed\n      vn1 <- dfn1[[vn1]]\n    }\n\n    ln1 <- ln[[n]]\n\n    ####### Allocate Vectors ##################################\n\n    # free-flow speed\n    vn_ff <- rep(NA_real_, time_length)\n\n    # car-following speed\n    vn_cf <- rep(NA_real_, time_length)\n\n    # speed\n    vn <- rep(NA_real_, time_length)\n\n    # position\n    xn <- rep(NA_real_, time_length)\n\n    # spacing\n    sn <- rep(NA_real_, time_length)\n\n    # speed difference\n    deltav <- rep(NA_real_, time_length)\n\n    # acceleration rate\n    bn <- rep(NA_real_, time_length)\n\n    ######## Initial values for Following vehicle ##################################\n\n    # speed\n    vn_ff[1] <- vn_first[[n]]\n    vn_cf[1] <- vn_first[[n]]\n    vn[1] <- vn_first[[n]]\n\n    # position\n    xn[1] <- xn_first[[n]]\n\n    # spacing\n    sn[1] <- xn1[1] - xn_first[[n]]\n\n    # speed difference\n    deltav[1] <- vn_first[[n]] - vn1[1]\n\n    ###### Gipps Calculations ############################\n\n    for (t in 2:(time_length - 1)) {\n\n      ## free flow\n      vn_ff[t] <- vn[t - 1] +\n        (2.5 * an * tau * (1 - (vn[t - 1]) / Vn)) * ((0.025 + (vn[t - 1] / Vn))^(0.5))\n\n      ## car following\n      bcap_part_cf <- (((vn1[t - 1])^2) / bcap)\n\n      vn_cf[t] <- (bn_const * tau) +\n        sqrt(\n          ((bn_const^2) * (tau^2)) - (bn_const * (2 * (xn1[t - 1] - ln1 - xn[t - 1]) - (vn[t - 1] * tau) - bcap_part_cf))\n        )\n\n      ## gipps speed\n      if (is.na(vn1[t - 1])) {\n        vn[t] <- vn_ff[t]\n      } else {\n        vn[t] <- min(vn_ff[t], vn_cf[t])\n      }\n\n      ### if the speed is negative, make it zero\n      vn[t] <- ifelse(vn[t] < 0, 0, vn[t])\n\n      ## acceleration\n      bn[t - 1] <- (vn[t] - vn[t - 1]) / (resolution)\n\n      ## position\n      xn[t] <- xn[t - 1] + (vn[t - 1] * resolution) + (0.5 * bn[t - 1] * (resolution)^2)\n\n      # spacing\n      sn[t] <- xn1[t] - xn[t] - ln1\n\n      # speed difference\n      deltav[t] <- vn[t] - vn1[t]\n    }\n    # ################## Result in a dataframe ###################################\n    result_dfn <- data.frame(fvn = n, Time, xn1, vn1, ln1, bcap, bn, xn, vn_ff, vn_cf, vn, sn, deltav)\n\n    list_of_N_veh[[n]] <- result_dfn\n\n    xn1 <- xn\n    vn1 <- vn\n  }\n\n  result <- do.call(\"rbind\", list_of_N_veh)\n\n\n  return(result)\n}\n```\n:::\n\n\n### Julia\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-7_b3ff4a9a467c1257aa511da8cdda902a'}\n\n```{.julia .cell-code}\nfunction simulate_gipps_julia(resolution, N, dfn1, \n    xn1, vn1, xn_first, vn_first, ln, an, \n    Vn, tau, bn_const, bcap)\n  \n    ####### Time #############################################\n\n    # Last time frame of the simulation:\n    last_time = (nrow(dfn1) - 1) * resolution\n\n    # Time vector:\n    Time = collect( range(0, stop = last_time, step = resolution) )\n\n    # Length of the Time vector\n    time_length = length(Time)\n\n    list_of_N_veh = Vector{Union{DataFrame, Missing}}(missing, N)\n    # sizehint!(list_of_N_veh, N)\n\n    for n in 1:length(list_of_N_veh)\n        ####### Assign names to Lead Vehicle Parameters ##########\n        \n        if (n == 1) \n            \n            # Lead vehicle position\n            xn1 = dfn1[!, xn1]\n            \n            # Lead vehicle speed\n            vn1 = dfn1[!, vn1]\n            \n        end\n\n        ln1 = ln[n]\n\n        ####### Allocate Vectors ##################################\n\n        # free-flow speed\n        vn_ff = Vector{Union{Float64, Missing}}(missing, time_length)\n        \n        # car-following speed\n        vn_cf = Vector{Union{Float64, Missing}}(missing, time_length)\n        \n        # speed\n        vn = Vector{Union{Float64, Missing}}(missing, time_length)\n        \n\n        # position\n        xn = Vector{Union{Float64, Missing}}(missing, time_length)\n        \n\n        # spacing\n        sn = Vector{Union{Float64, Missing}}(missing, time_length)\n        \n\n        # speed difference\n        deltav = Vector{Union{Float64, Missing}}(missing, time_length)\n        \n\n        # acceleration rate\n        bn = Vector{Union{Float64, Missing}}(missing, time_length)\n        \n\n            ######## Initial values for Following vehicle ##################################\n\n        # speed\n        vn_ff[1] = vn_first[n]\n        vn_cf[1] = vn_first[n]\n        vn[1] = vn_first[n]\n\n        # position\n        xn[1] = xn_first[n]\n\n        # spacing\n        sn[1] = xn1[1] - xn_first[n]\n\n        # speed difference\n        deltav[1] = vn_first[n] - vn1[1]\n\n        ###### Gipps Calculations ############################\n        \n        for t in 2:(time_length-1)\n\n            ## free flow\n            vn_ff[t] = vn[t-1] + (2.5 * an * tau * (1 - (vn[t-1])/Vn)) * ((0.025 + (vn[t-1]/Vn))^(0.5))\n\n            ## car following\n            bcap_part_cf = (((vn1[t-1])^2)/bcap)\n\n            vn_cf[t] = (bn_const * tau) + sqrt(((bn_const^2) * (tau^2)) - (bn_const * (2 * (xn1[t-1] - ln1 - xn[t-1]) - (vn[t-1] * tau) - bcap_part_cf)))\n\n            ## gipps speed\n            if (ismissing.(vn1[t-1]))\n            \n            vn[t] = vn_ff[t]\n            \n            else \n            \n            vn[t] = min(vn_ff[t], vn_cf[t] )\n            \n            end\n\n            ### if the speed is negative, make it zero\n            vn[t] = ifelse(vn[t] < 0, 0, vn[t])\n            \n            \n            ## acceleration\n            bn[t-1] = (vn[t] - vn[t-1])/(resolution)\n            \n            \n            \n            ## position\n            xn[t] = xn[t-1] + (vn[t-1] * resolution) + (0.5 * bn[t-1] * (resolution)^2)\n            \n            \n            # spacing\n            sn[t] = xn1[t] - xn[t] - ln1\n            \n            # speed difference\n            deltav[t] = vn[t] - vn1[t]\n\n        end\n\n    # ################## Result in a dataframe ###################################\n        result_dfn = DataFrame(fvn=n, Time =Time, xn1=xn1, vn1=vn1, ln1=ln1, bn=bn, xn=xn, vn=vn, sn=sn, deltav=deltav)\n        \n        \n        list_of_N_veh[n] = result_dfn\n        \n        xn1 = xn\n        vn1 = vn\n\n    end\n\n    result = reduce(vcat, list_of_N_veh)\n\n    return result\n\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsimulate_gipps_julia (generic function with 1 method)\n```\n:::\n:::\n\n\n### Rcpp\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-8_7ef706a57a3dea3fe648ebd9d0a81f2d'}\n\n```{.rcpp .cell-code}\n#include <cmath>\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n\n\n// [[Rcpp::export]]\nDataFrame for_loop_gipps(double resolution,\n                         int n,\n                         int time_length,\n                         double tau,\n                         double an,\n                         double bn_const,\n                         double Vn,\n                         double bcap,\n                         double ln1,\n\n                         NumericVector Time,\n                         NumericVector vn_ff,\n                         NumericVector vn_cf,\n                         NumericVector vn,\n                         NumericVector vn1,\n                         NumericVector sn,\n                         NumericVector xn,\n                         NumericVector xn1,\n                         NumericVector deltav,\n                         NumericVector bn\n) {\n\n\n  for(int t = 1; t < (time_length-1); t++) {\n\n    // ## free flow\n    vn_ff[t] = vn[t-1] + (2.5 * an * tau * (1 - (vn[t-1])/Vn)) * ((0.025 + pow((vn[t-1]/Vn), 0.5)));\n\n    // if (Rcpp::NumericVector::is_na(vn1[t-1])) {\n    //\n    //   vn1[t-1] = 0;\n    //\n    // } else {\n    //\n    //   vn1[t-1] = vn1[t-1];\n    //\n    //   }\n\n    // ## car following\n    vn_cf[t] = (bn_const * tau) + sqrt(\n      (pow(bn_const,2) * pow(tau,2)) - (bn_const * (2 * (xn1[t-1] - ln1 - xn[t-1]) - (vn[t-1] * tau) - (pow((vn1[t-1]),2)/bcap)))\n    );\n\n    // ## gipps speed\n\n    if (Rcpp::NumericVector::is_na(vn1[t-1])){\n\n      vn[t] = vn_ff[t];\n\n    } else {\n\n      if (vn_ff[t] < vn_cf[t]){\n\n        vn[t] = vn_ff[t];\n\n      } else {\n\n        vn[t] = vn_cf[t];\n\n        }\n\n    }\n\n    // ### if the speed is negative, make it zero\n\n    if (vn[t] < 0) {\n\n      vn[t] = 0;\n\n    } else {\n\n      vn[t] = vn[t];\n\n    }\n\n    // ## acceleration\n    bn[t-1] = (vn[t] - vn[t-1])/(resolution);\n\n    // ## position\n    xn[t] = xn[t-1] + (vn[t-1] * resolution) + (0.5 * bn[t-1] * pow(resolution, 2));\n\n    // # spacing\n    sn[t] = xn1[t] - xn[t];\n\n    // # speed difference\n    deltav[t] = vn[t] - vn1[t];\n\n\n  }\n\n  DataFrame df = DataFrame::create(Named(\"fvn\") = n,\n                                   Named(\"Time\") = Time,\n                                   Named(\"xn1\") = xn1,\n                                   Named(\"vn1\") = vn1,\n                                   Named(\"ln1\") = ln1,\n                                   Named(\"bn\") = bn,\n                                   Named(\"xn\") = xn,\n                                   Named(\"vn\") = vn,\n                                   Named(\"sn\") = sn,\n                                   Named(\"deltav\") = deltav,\n                                   Named(\"vn_ff\") = vn_ff,\n                                   Named(\"vn_cf\") = vn_cf);\n\n  return df;\n\n\n}\n```\n:::\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-9_43f52eb5acc11c80fb1d1e2d6853bb57'}\n\n```{.r .cell-code}\nsimulate_gipps_rcpp <- function(\n\n  ############## Simulation Parameters #######################\n  resolution, # Duration of a time frame. Typical values are 0.1, 0.5, 1.0 s. Double. Must match with the resolution of the observed lead vehicle data dfn1\n  N, # Number of Following Vehicles in the same lane (platoon). Integer.\n\n\n  ############### Lead Vehicle Data #########################\n  dfn1, # Name (unquoted) of the dataframe that contains lead vehicle data.\n  xn1, # Name of the column in dfn1 that contains lead vehicle position. Character.\n  vn1, # Name of the column in dfn1 that contains lead vehicle speed. Character.\n\n\n\n  ############### Following Vehicle Data ####################\n  xn_first, # First value of vehicle position of each of the following vehicles. A list of doubles with size equal to N.\n  vn_first, # First value of vehicle speed of each of the following vehicles. A list of doubles with size equal to N.\n  ln, # Effective size of each of the lead vehicles i.e. vehicle length plus margin of safety. A list of doubles with size equal to N.\n\n\n  ############### Model Parameters ##########################\n  an, # Maximum acceleration which the driver wishes to undertake m/s2. Double.\n  Vn, # Desired speed/speed at which driver  wishes to travel m/s. Double.\n  tau, # Reaction Time s. Double.\n  bn_const, # Most severe braking that the driver wishes to undertake m/s2. Double and Negative.\n  bcap # An estimate of lead vehicle deceleration m/s2. Double and Negative.\n\n\n\n) {\n\n  ####### Time #############################################\n\n  # Last time frame of the simulation:\n  last_time <- (nrow(dfn1) - 1) * resolution\n\n  # Time vector:\n  Time <- seq(from = 0, to = last_time, by = resolution)\n\n  # Length of the Time vector\n  time_length <- length(Time)\n\n\n\n\n\n\n  list_of_N_veh <- vector(mode = \"list\", length = N)\n\n\n  for (n in seq_along(list_of_N_veh)) {\n\n    ####### Assign names to Lead Vehicle Parameters ##########\n\n    if (n == 1L) {\n\n      # Lead vehicle position\n      xn1 <- dfn1[[xn1]]\n\n      # Lead vehicle speed\n      vn1 <- dfn1[[vn1]]\n\n    }\n\n    ln1 <- ln[[n]]\n\n    ####### Allocate Vectors ##################################\n\n    # free-flow speed\n    vn_ff <- rep(NA_real_, time_length)\n\n    # car-following speed\n    vn_cf <- rep(NA_real_, time_length)\n\n    # speed\n    vn <- rep(NA_real_, time_length)\n\n    # position\n    xn <- rep(NA_real_, time_length)\n\n    # spacing\n    sn <- rep(NA_real_, time_length)\n\n    # speed difference\n    deltav <- rep(NA_real_, time_length)\n\n    # acceleration rate\n    bn <- rep(NA_real_, time_length)\n\n    ######## Initial values for Following vehicle ##################################\n\n    # speed\n    vn_ff[1] <- vn_first[[n]]\n    vn_cf[1] <- vn_first[[n]]\n    vn[1] <- vn_first[[n]]\n\n    # position\n    xn[1] <- xn_first[[n]]\n\n    # spacing\n    sn[1] <- xn1[1] - xn_first[[n]]\n\n    # speed difference\n    deltav[1] <- vn_first[[n]] - vn1[1]\n\n    ###### Gipps Calculations ############################\n\n    result_dfn <- for_loop_gipps(resolution,\n                                 n,\n                                 time_length,\n                                 tau,\n                                 an,\n                                 bn_const,\n                                 Vn,\n                                 bcap,\n                                 ln1,\n\n                                 Time,\n                                 vn_ff,\n                                 vn_cf,\n                                 vn,\n                                 vn1,\n                                 sn,\n                                 xn,\n                                 xn1,\n                                 deltav,\n                                 bn\n    )\n\n    ################## Result in a dataframe ###################################\n\n    list_of_N_veh[[n]] <- result_dfn\n\n    xn1 <- result_dfn$xn\n    vn1 <- result_dfn$vn\n\n\n  }\n\n  result <- do.call(\"rbind\", list_of_N_veh)\n\n  # return the result dataframe\n  return(result)\n\n}\n```\n:::\n\n:::\n\n## Running the function on data\n\nThe functions are defined above. Let's run them now with the data of a single car-following pair.  \n\n::: panel-tabset\n### R\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-10_9451be04d314f291e4710a159a2a775f'}\n\n```{.r .cell-code}\nresult_r <- simulate_gipps_r(0.1, \n                         1, \n                         \n                         dfn1_r,\n                         'PrecVehLocalY',\n                         'PrecVehVel',\n                         \n                         list(dfn1_r$Local.Y[1]), \n                         list(dfn1_r$svel[1]), \n                         list(unique(dfn1_r$PrecVehLength)), \n                         \n                         2, \n                         max(dfn1_r$svel), \n                         1.2, \n                         -1.5, \n                         -2)\n\nhead(result_r, 3)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"fvn\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Time\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"xn1\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vn1\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ln1\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bcap\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bn\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"xn\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vn_ff\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vn_cf\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vn\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sn\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"deltav\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"0.0\",\"3\":\"66.16815\",\"4\":\"4.42300\",\"5\":\"4.3591\",\"6\":\"-2\",\"7\":\"4.708065444\",\"8\":\"50.20508\",\"9\":\"4.420080\",\"10\":\"4.420080\",\"11\":\"4.420080\",\"12\":\"15.96307\",\"13\":\"-0.0029200\",\"_rn_\":\"1\"},{\"1\":\"1\",\"2\":\"0.1\",\"3\":\"66.61045\",\"4\":\"4.42305\",\"5\":\"4.3591\",\"6\":\"-2\",\"7\":\"-0.688704077\",\"8\":\"50.67063\",\"9\":\"6.786645\",\"10\":\"4.890887\",\"11\":\"4.890887\",\"12\":\"11.58072\",\"13\":\"0.4678365\",\"_rn_\":\"2\"},{\"1\":\"1\",\"2\":\"0.2\",\"3\":\"67.05276\",\"4\":\"4.42308\",\"5\":\"4.3591\",\"6\":\"-2\",\"7\":\"-0.004409401\",\"8\":\"51.15627\",\"9\":\"7.210242\",\"10\":\"4.822016\",\"11\":\"4.822016\",\"12\":\"11.53739\",\"13\":\"0.3989361\",\"_rn_\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Rcpp\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-11_c61c7768c4799ebf5c310cfaae820cb0'}\n\n```{.r .cell-code}\nresult_rcpp <- simulate_gipps_rcpp(0.1, \n                         1, \n                         \n                         dfn1_r,\n                         'PrecVehLocalY',\n                         'PrecVehVel',\n                         \n                         list(dfn1_r$Local.Y[1]), \n                         list(dfn1_r$svel[1]), \n                         list(unique(dfn1_r$PrecVehLength)), \n                         \n                         2, \n                         max(dfn1_r$svel), \n                         1.2, \n                         -1.5, \n                         -2)\n\nhead(result_rcpp, 3)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"fvn\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Time\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"xn1\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vn1\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ln1\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bn\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"xn\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vn\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sn\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"deltav\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vn_ff\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vn_cf\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"0.0\",\"3\":\"66.16815\",\"4\":\"4.42300\",\"5\":\"4.3591\",\"6\":\"4.708065444\",\"7\":\"50.20508\",\"8\":\"4.420080\",\"9\":\"15.96307\",\"10\":\"-0.0029200\",\"11\":\"4.420080\",\"12\":\"4.420080\",\"_rn_\":\"1\"},{\"1\":\"1\",\"2\":\"0.1\",\"3\":\"66.61045\",\"4\":\"4.42305\",\"5\":\"4.3591\",\"6\":\"-0.688704077\",\"7\":\"50.67063\",\"8\":\"4.890887\",\"9\":\"15.93982\",\"10\":\"0.4678365\",\"11\":\"6.805472\",\"12\":\"4.890887\",\"_rn_\":\"2\"},{\"1\":\"1\",\"2\":\"0.2\",\"3\":\"67.05276\",\"4\":\"4.42308\",\"5\":\"4.3591\",\"6\":\"-0.004409401\",\"7\":\"51.15627\",\"8\":\"4.822016\",\"9\":\"15.89649\",\"10\":\"0.3989361\",\"11\":\"7.231150\",\"12\":\"4.822016\",\"_rn_\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Julia\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-12_4013153ff4a26365c882bd49d7d03832'}\n\n```{.julia .cell-code}\nresult_julia = simulate_gipps_julia(\n  0.1, \n  1, \n  \n  dfn1_julia,\n  \"PrecVehLocalY\",\n  \"PrecVehVel\",\n  \n  Vector([dfn1_julia[!,\"Local.Y\"][1]]), \n  Vector([dfn1_julia.svel[1]]), \n  Vector(unique(dfn1_julia.PrecVehLength)), \n\n  2, \n  maximum(dfn1_julia.svel), \n  0.1, \n  -1.5, \n  -2\n);\n\n\nfirst(result_julia, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3×10 DataFrame\n Row │ fvn    Time     xn1      vn1      ln1      bn        xn        vn       ⋯\n     │ Int64  Float64  Float64  Float64  Float64  Float64?  Float64?  Float64? ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │     1      0.0  66.1681  4.423     4.3591   1.97214   50.2051   4.42008 ⋯\n   2 │     1      0.1  66.6105  4.42305   4.3591   1.95774   50.6569   4.61729\n   3 │     1      0.2  67.0528  4.42308   4.3591   1.94046   51.1285   4.81307\n                                                               2 columns omitted\n```\n:::\n:::\n\n:::\n\n\n\n\n\n\n\n## Plotting the results\n\nFollowing plots compare the speed predicted by the Gipps model with the observed speed of the following vehicle.\n\n\n\n### R\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-13_0d7d65ef0195c2641ca32453ba5b5979'}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(data = dfn1_r, \n            aes(Time, svel, color=\"Obs. Speed\")) +\n  geom_point(data = result_r %>% filter(fvn==1), \n             aes(Time, vn, color=\"Gipps. Speed-R\")) +\n  geom_line(data = result_rcpp %>% filter(fvn==1), \n            aes(Time, vn, color=\"Gipps. Speed-Rcpp\"))\n```\n\n::: {.cell-output-display}\n![](gipps-model-in-r-and-julia_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### Julia\n\n\n::: {.cell hash='gipps-model-in-r-and-julia_cache/html/unnamed-chunk-14_953d5e55b17c9eae223ca42fbab28c50'}\n\n```{.julia .cell-code}\nusing Plots\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
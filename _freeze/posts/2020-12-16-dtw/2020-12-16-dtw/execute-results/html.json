{
  "hash": "46c407824e5323da6631ca33e38222e3",
  "result": {
    "markdown": "---\ntitle: Dynamic Time Warping and Hierarchical Clustering with {gapminder}\ndate: '2020-12-16'\nimage: \"pp.png\"\n---\n\n\n\n\n# Goal\n\nI want to find which countries are the most similar to each other in terms of their life expectancy, population and GDP over the years\n\n\n# Load packages\n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-1_dba193d729c068d808f2a733e858e8ec'}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(dtwclust))\nsuppressPackageStartupMessages(library(factoextra))\nsuppressPackageStartupMessages(library(gapminder))\nsuppressPackageStartupMessages(library(ggrepel))\n```\n:::\n\n\nWe'll use `dtwclust` for hierarchical clustering using the `dtw_basic` as the distance measure. If you are not familiar with these methods, please read about [dynamic time warping](http://www.phon.ox.ac.uk/jcoleman/old_SLP/Lecture_5/DTW_explanation.html) and [hierachical clustering](https://people.revoledu.com/kardi/tutorial/Clustering/Numerical%20Example.htm).  \n\n\n# Data\n\nWe are going to use the `gapminder` dataset for comparing different countries. Let's see the first few rows here:\n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-2_5aeb3acfbe99248796c6e0b911facafe'}\n\n```{.r .cell-code}\ngapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 x 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ... with 1,694 more rows\n# i Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\nPlot of life expectancy:\n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-3_8a69bff3b63d37e5d5c59f8420ed2072'}\n\n```{.r .cell-code}\n# Let's plot the life expectancy over years \n# and represent each country by a line\nggplot(data=gapminder)+\n  geom_line(aes(group=country, x=year, y=lifeExp,\n                color = continent)) +\n  facet_wrap(~ continent)\n```\n\n::: {.cell-output-display}\n![](2020-12-16-dtw_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nSimilarly, you can plot other variables to see their time-series.  \n\n\n# Cluster Analysis:\n\n## Step 1) Choose the variables you want to use in calculating the dtw dissimilarity score\n\nHere, I am choosing to use only the countries in Asia, and I am going to use life expectancy, population and GDP for the estimation of dtw score.\n\nAlso, it is important to scale all variables as right now they are in different scales. You can also scale them in the function that does the clustering.\n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-4_0f09f75e5ab7d6f10c5541e1519d08f9'}\n\n```{.r .cell-code}\n### Function to scale a variable\nscale_this <- function(x){\n  (x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)\n}\n\n\ndf <- gapminder %>% \n  filter(continent == \"Asia\") %>% # countries in Asia only\n  group_by(country) %>%           # scaling the vars for each country\n  mutate(lifeExp = scale_this(lifeExp),\n         pop = scale_this(pop),\n         gdpPercap = scale_this(gdpPercap)\n  ) %>%\n  ungroup()\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 396 x 6\n   country     continent  year lifeExp     pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>   <dbl>     <dbl>\n 1 Afghanistan Asia       1952  -1.70  -1.04      -0.215\n 2 Afghanistan Asia       1957  -1.40  -0.925      0.168\n 3 Afghanistan Asia       1962  -1.08  -0.781      0.466\n 4 Afghanistan Asia       1967  -0.678 -0.602      0.310\n 5 Afghanistan Asia       1972  -0.273 -0.386     -0.579\n 6 Afghanistan Asia       1977   0.188 -0.133     -0.153\n 7 Afghanistan Asia       1982   0.466 -0.414      1.62 \n 8 Afghanistan Asia       1987   0.656 -0.275      0.460\n 9 Afghanistan Asia       1992   0.823  0.0695    -1.42 \n10 Afghanistan Asia       1997   0.840  0.900     -1.55 \n# ... with 386 more rows\n# i Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\n\n## Step 2) Split the data by each country and convert to a matrix\n\nThis is required by the `dtwclust` package. \n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-5_96b0945efcaf12b5b53ce6876f7bad8a'}\n\n```{.r .cell-code}\ndf_matrix <- df %>% \n  split(.$country, drop = T) %>% \n  purrr::map(~ .x[, c(\"lifeExp\",    # names of all vars\n                       \"pop\",\n                       \"gdpPercap\"\n                      )]) %>% \n  purrr::map(as.matrix) \n\n### printing out df shows the matrices by country\nstr(df_matrix[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:12, 1:3] -1.702 -1.402 -1.075 -0.678 -0.273 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:3] \"lifeExp\" \"pop\" \"gdpPercap\"\n```\n:::\n:::\n\n\n\n## Step 3) Use the `tsclust` function from the `dtwclust` package for clustering using the dtw score\n\nBoth steps are done using a single function:\n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-6_b5a3922a8f79a151326874ab67bc55eb'}\n\n```{.r .cell-code}\nclusters_gp <- df_matrix %>% \n  tsclust(., \n          k = 8L,                 # assuming clusters\n          distance = \"dtw_basic\", # this is dtw score\n          seed = 390,             # to reproduce results\n          type=\"hierarchical\",    # type of clustering\n          control = hierarchical_control(method = \"ward.D\")) # method in hc\n\nclusters_gp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhierarchical clustering with 8 clusters\nUsing dtw_basic distance\nUsing PAM (Hierarchical) centroids\nUsing method ward.D \n\nTime required for analysis:\n   user  system elapsed \n   0.04    0.00    0.05 \n\nCluster sizes with average intra-cluster distance:\n\n  size  av_dist\n1    1 0.000000\n2    3 5.422677\n3    6 8.436258\n4   13 7.564260\n5    2 6.603003\n6    2 8.962541\n7    5 9.061991\n8    1 0.000000\n```\n:::\n:::\n\n\n\n\n# Plotting the results\n\n## A dendrogram (tree)\n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-7_d696ffbf015eb4056e3f4390f11578c6'}\n\n```{.r .cell-code}\nfviz_dend(clusters_gp, k = 8, # Cut the tree in groups\n          cex = 0.5, # label size\n          color_labels_by_k = TRUE, # color labels by groups\n          rect = TRUE, # Add rectangle around groups\n          horiz = TRUE, # Make the tree horizontal\n          ylab = \"DTW score\",\n          palette = \"uchicago\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](2020-12-16-dtw_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Labeling countries based on clusters and visualizing each variable\n\nWe are now joining the estimated groups with the data:\n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-8_efade304a6755036682d274dd8a6fabd'}\n\n```{.r .cell-code}\nGps <- as.data.frame(cutree(clusters_gp, k = 8)) # num of clusters\ncolnames(Gps) <- \"Gp\"\nGps$country <- row.names(Gps)\nrow.names(Gps) <- NULL\n\n\n\n## Getting the clustering info into the original data\ngapminder_Asia <- gapminder %>% \n  filter(continent == \"Asia\") %>% \n  left_join(x=., y=Gps, by = \"country\")\n\ngapminder_Asia\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 396 x 7\n   country     continent  year lifeExp      pop gdpPercap    Gp\n   <chr>       <fct>     <int>   <dbl>    <int>     <dbl> <int>\n 1 Afghanistan Asia       1952    28.8  8425333      779.     1\n 2 Afghanistan Asia       1957    30.3  9240934      821.     1\n 3 Afghanistan Asia       1962    32.0 10267083      853.     1\n 4 Afghanistan Asia       1967    34.0 11537966      836.     1\n 5 Afghanistan Asia       1972    36.1 13079460      740.     1\n 6 Afghanistan Asia       1977    38.4 14880372      786.     1\n 7 Afghanistan Asia       1982    39.9 12881816      978.     1\n 8 Afghanistan Asia       1987    40.8 13867957      852.     1\n 9 Afghanistan Asia       1992    41.7 16317921      649.     1\n10 Afghanistan Asia       1997    41.8 22227415      635.     1\n# ... with 386 more rows\n# i Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\n## Plotting each variable by group\n\nFollowing plots show the time-series of life expectancy, population and GDP by group:  \n\n\n\n::: {.cell hash='2020-12-16-dtw_cache/html/unnamed-chunk-9_09f6912634ca28078591eacd52dffa33'}\n\n```{.r .cell-code}\n### Select 15 countries at random to label on plot\nset.seed(123)\n\nselected_countries <- gapminder_Asia %>% \n  group_by(Gp) %>% \n  select(country) %>% \n  unique() %>% \n  sample_n(size = 4, replace = TRUE) %>% \n  ungroup() %>% \n  pull(country) %>% \n  unique()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `Gp`\n```\n:::\n\n```{.r .cell-code}\nsc_data <- gapminder_Asia %>% \n  filter(year == 1982,\n         country %in% selected_countries)\n\n\n\n### lifeExp\nggplot(data = gapminder_Asia,\n       aes(x = year, y = lifeExp)) +\n  geom_line(aes(group=country), color = \"grey\") +\n  facet_wrap(~ Gp) +\n  geom_line(data = gapminder_Asia %>% \n              filter(country %in% selected_countries),\n            aes(group=country)) +\n  geom_text_repel(data = sc_data,\n            aes(label = country),\n            box.padding = 1,\n            nudge_x = .15,\n            nudge_y = .5,\n            arrow = arrow(length = unit(0.015, \"npc\")),\n            hjust = 0\n            ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](2020-12-16-dtw_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### pop\nggplot(data = gapminder_Asia,\n       aes(x = year, y = pop)) +\n  geom_line(aes(group=country), color = \"grey\") +\n  facet_wrap(~ Gp, scales = \"free_y\") +\n  geom_line(data = gapminder_Asia %>% \n              filter(country %in% selected_countries),\n            aes(group=country)) +\n  geom_text_repel(data = sc_data,\n                  aes(label = country),\n                  box.padding = 1,\n                  nudge_x = .15,\n                  nudge_y = .5,\n                  arrow = arrow(length = unit(0.015, \"npc\")),\n                  hjust = 0\n  ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](2020-12-16-dtw_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n\n```{.r .cell-code}\n### gdpPercap\npp <- ggplot(data = gapminder_Asia,\n       aes(x = year, y = gdpPercap)) +\n  geom_line(aes(group=country), color = \"grey\") +\n  facet_wrap(~ Gp, scales = \"free_y\") +\n  geom_line(data = gapminder_Asia %>% \n              filter(country %in% selected_countries),\n            aes(group=country)) +\n  geom_text_repel(data = sc_data,\n                  aes(label = country),\n                  box.padding = 1,\n                  nudge_x = .15,\n                  nudge_y = .5,\n                  arrow = arrow(length = unit(0.015, \"npc\")),\n                  hjust = 0\n  ) +\n  theme_bw()\n\nggsave(\"pp.png\", plot=pp, dpi=600)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "97674875e59269046208925d76fe9295",
  "result": {
    "markdown": "---\ntitle: Creating and combining multiple animations with gganimate and magick\ndate: '2020-09-13'\nimage: \"c_gif.gif\"\n---\n\n\n\n\n## Credit\n\nThanks to **Robert Walker** for showing how to combine multiple animations using the `magick` package in R.  \n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Wow, you can side-by-side gganimates with imagemagick. That was fun to put together. <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> <a href=\"https://twitter.com/hashtag/tidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#tidyTuesday</a> An adaptation of measles and a map... <a href=\"https://t.co/FPOgAOQS84\">pic.twitter.com/FPOgAOQS84</a></p>&mdash; Robert Walker (@PieRatio) <a href=\"https://twitter.com/PieRatio/status/1206508341750456320?ref_src=twsrc%5Etfw\">December 16, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n  \n\n\n# Animating cars\n\nIn a [previous blogpost](https://rgems.netlify.app/post/2020/09/07/creating-your-own-geom-in-ggplot2/), I showed how to create a new geom to plot cars as seen from top and rear. This post is about animating them in a way to synchronie their timing.  \n\n`gganimate` package is a powerful animation package in R, but as of this writing, it does not have a function to combine multiple animations. So, we'll use the `magick` package to combine the animations.\n\n## Load data\n\nI am using a dataset that contains car positions, speed and distance (also called as *spacing*).  \n\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/load_data_77051f0d00c7be516e49557c83e8e5a6'}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages( library(tidyverse) )\nsuppressPackageStartupMessages( library(magick) )\nsuppressPackageStartupMessages( library(gganimate) )\nsuppressPackageStartupMessages( library(here) )\nsuppressPackageStartupMessages( library(readr) )\n\ndf <- read_csv(\"vb.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n-- Column specification --------------------------------------------------------\ncols(\n  Time_s = col_double(),\n  ED_x_m = col_double(),\n  LV_x_m = col_double(),\n  LV_length_m = col_double(),\n  LV_width_m = col_double(),\n  visual_angle_W = col_double(),\n  visual_angle_H = col_double(),\n  tau = col_double(),\n  ED_speed_mps = col_double(),\n  LV_speed_mps = col_double(),\n  LV_frspacing_m = col_double(),\n  ED_gas_pedal_pos = col_double(),\n  ED_brake_pedal_force_kg = col_double(),\n  tau_inv = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 49 x 14\n   Time_s ED_x_m LV_x_m LV_lengt~1 LV_wi~2 visua~3 visua~4   tau ED_sp~5 LV_sp~6\n    <dbl>  <dbl>  <dbl>      <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>\n 1      1  4341.  3991.       5.39    2.29 0.00185 0.00128  55.1    22.4       0\n 2      2  4335.  3991.       5.39    2.29 0.00189 0.00130  52.8    22.9       0\n 3      3  4329.  3991.       5.39    2.29 0.00193 0.00133  50.7    23.5       0\n 4      4  4322.  3991.       5.39    2.29 0.00197 0.00136  48.6    24.0       0\n 5      5  4315.  3991.       5.39    2.29 0.00201 0.00138  46.9    24.3       0\n 6      6  4308.  3991.       5.39    2.29 0.00205 0.00141  45.3    24.7       0\n 7      7  4302.  3991.       5.39    2.29 0.00210 0.00145  43.7    25         0\n 8      8  4294.  3991.       5.39    2.29 0.00215 0.00148  42.1    25.3       0\n 9      9  4287.  3991.       5.39    2.29 0.00220 0.00152  40.6    25.7       0\n10     10  4280.  3991.       5.39    2.29 0.00226 0.00156  39.1    26.0       0\n# ... with 39 more rows, 4 more variables: LV_frspacing_m <dbl>,\n#   ED_gas_pedal_pos <dbl>, ED_brake_pedal_force_kg <dbl>, tau_inv <dbl>, and\n#   abbreviated variable names 1: LV_length_m, 2: LV_width_m,\n#   3: visual_angle_W, 4: visual_angle_H, 5: ED_speed_mps, 6: LV_speed_mps\n# i Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/load_function_4bb0e5f51a6311962140e8eec1fa2059'}\n\n:::\n\n\nAs discussed in the [previous blogpost](https://rgems.netlify.app/post/2020/09/07/creating-your-own-geom-in-ggplot2/), I had to adjust the coordinates to make one car appear approaching another car. So, we estimate the first and last coordinates in the data to do that.  \n\n\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/coords_539c1e87476bc64349c61dfed1f570ed'}\n\n```{.r .cell-code}\n# Largest x coordinate of following vehicle------------------\n  first_ed_x_coord <- df %>% pull(ED_x_m) %>% range() %>% tail(1)\n  last_ed_x_coord <- df %>% pull(ED_x_m) %>% range() %>% head(1)\n```\n:::\n\n\n\n# Creating animations with `gganimate`\n\nNow, the following code shows three animations created using `gganimate`.  \n\n## Top view\n\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/ani1_cae8ab9a66af660c9707a425989c5f6d'}\n\n```{.r .cell-code}\n# animation of position---------------------------------------\n  ani_car_b <- ggplot(df) +\n    geom_car(aes(x=abs(ED_x_m-first_ed_x_coord), \n                 y=first_ed_x_coord-last_ed_x_coord, length=4.64, width=2.078, fill=\"ed\")) +\n    geom_text(aes(x=abs(ED_x_m-first_ed_x_coord), y = (first_ed_x_coord-last_ed_x_coord)+3,\n                  label = paste(\"Following Car\\nSpeed =\", ED_speed_mps, \"m/s\")),\n              color=\"darkgray\"\n    ) +\n    geom_car(aes(x=abs(LV_x_m-first_ed_x_coord), y=first_ed_x_coord-last_ed_x_coord, length=LV_length_m,\n                 width=LV_width_m, fill=\"lv\")) +\n    geom_text(aes(x=abs(LV_x_m-first_ed_x_coord), y = (first_ed_x_coord-last_ed_x_coord)+3, \n                  label = paste(\"Lead Car\\nSpeed =\", LV_speed_mps, \"m/s\")),\n              color=\"darkgray\") +\n    \n    geom_segment(aes(x = abs(ED_x_m-first_ed_x_coord)+(0.5*4.64),\n                     xend = abs(LV_x_m-first_ed_x_coord)-(0.5*LV_length_m),\n                     y = first_ed_x_coord-last_ed_x_coord,\n                     yend= first_ed_x_coord-last_ed_x_coord), \n                 arrow = arrow(length = unit(0.1, \"inches\"), ends = \"both\")) +\n    geom_text(aes(x= ((abs(ED_x_m-first_ed_x_coord)+(0.5*4.64))+(abs(LV_x_m-first_ed_x_coord)-(0.5*LV_length_m)))/2, y = (first_ed_x_coord-last_ed_x_coord)+3.5, \n                  label = paste(\"Spacing =\", LV_frspacing_m, \"m\")),\n              color=\"darkgray\") +\n    \n    coord_equal(ratio=0.7) +\n    scale_fill_manual(values = c(\"blue\", \"black\")) +\n    theme_void() +\n    theme(legend.position = \"none\",\n          axis.text = element_blank(),\n          axis.title = element_blank(),\n          axis.ticks = element_blank()\n    ) +\n    transition_manual(Time_s) +\n    ease_aes() +\n    view_follow()\n\nani_car_b\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nnframes and fps adjusted to match transition\n```\n:::\n\n::: {.cell-output-display}\n![](2020-09-13-combining-multiple-animations_files/figure-html/ani1-1.gif)\n:::\n:::\n\n\n## Pedal positions and inverse time-to-collision\n\nThe following animation shows how the gas and brake pedal positions change over time. The variable `tau-inverse` represents the inverse of time-to-collision (seconds until collision happens *if* cars don't change their speeds).  \n\n\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/ani2_5e51a7b1bd5ad1701e35719431dc9c22'}\n\n```{.r .cell-code}\n# animation of pedals/looming---------------------------------------\npedals_pos_b <- ggplot(data = df,\n                         mapping = aes(x = Time_s)) +\n    geom_line(aes(y = tau_inv*10), color = \"black\") +\n    geom_text(aes(y = tau_inv*10,\n                  label = paste(\"tau-inv =\", round(tau_inv, 2))), color = \"black\",\n              size = 5) +\n    geom_area(aes(y = tau_inv*10), fill = \"gray\",\n              position = \"identity\", alpha=0.6)+\n    \n    geom_line(aes(y = scale(ED_gas_pedal_pos)), color = \"darkgreen\") +\n    geom_text(aes(y = scale(ED_gas_pedal_pos)),\n              label = \"Gas Pedal\", color = \"darkgreen\") +\n    \n    geom_line(aes(y = scale(ED_brake_pedal_force_kg)), color = \"red\") +\n    geom_text(aes(y = scale(ED_brake_pedal_force_kg)),\n              label = \"Brake Pedal\", color = \"red\") +\n    \n    geom_text(x= 10, y = 4, \n              aes(label = paste(\"Brake Pedal Force =\", \n                                round(ED_brake_pedal_force_kg), \"kg\"))) +\n    theme_void() +\n    transition_reveal(Time_s)\n  \n\n pedals_pos_b\n```\n\n::: {.cell-output-display}\n![](2020-09-13-combining-multiple-animations_files/figure-html/ani2-1.gif)\n:::\n:::\n\n\n\n## Driver's front view\n\nThe following animation shows what the driver in the following car sees from the windscreen. It represents how the image of the lead vehicle grows on the following driver's retina.  \n\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/ani3_64896a6ff2b1596cf7b563a096465218'}\n\n```{.r .cell-code}\n# animation of car rear---------------------------------------\nani_retina_b <- ggplot(df ) +\n    geom_car_rear(aes(x=0, y=0, length=visual_angle_W,\n                      width=visual_angle_H), fill=\"black\") +\n    theme_void() +\n    theme(axis.text = element_blank(),\n          axis.title = element_blank(),\n          axis.ticks = element_blank())+\n    coord_fixed(ratio = 0.7) +\n    transition_manual(Time_s) \n  \n ani_retina_b\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nnframes and fps adjusted to match transition\n```\n:::\n\n::: {.cell-output-display}\n![](2020-09-13-combining-multiple-animations_files/figure-html/ani3-1.gif)\n:::\n:::\n\n\n\n## Rendering animations and saving them\n\nNow that the three animations are created, we can render them using `gganimate::animate` function. Without doing this, the animations are rendered every time we call them.\n\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/render_anims_e5a672ff079b9754bd4bfd37c9bcd8b6'}\n\n```{.r .cell-code}\n# Rendering gifs-------------------------------------------------\n  a_gif <- animate(ani_car_b, height = 3, width = 8, end_pause = 15,\n                   units = \"in\", res = 150, fps = 5, duration=10)\n  b_gif <- animate(pedals_pos_b, fps = 5, duration=10,\n                   height = 3.5, width = 4.5, end_pause = 15,\n                   units = \"in\", res = 150)\n  c_gif <- animate(ani_retina_b, fps = 5, duration=10,\n                   height = 3.5, width = 3.5, end_pause = 15,\n                   units = \"in\", res = 150)\n  \n## saving  \nanim_save(filename = \"a_gif.gif\",\n          animation = a_gif)\nanim_save(filename = \"b_gif.gif\",\n          animation = b_gif)\nanim_save(filename = \"c_gif.gif\",\n          animation = c_gif)\n```\n:::\n\n\n\n# Combining animations\n\nTo combine the above three animations, we are going to use the `magick` package.   \n\n## Reading the gif images\n\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/convert_to_magick_290a13c10c44ca63ae349dd6843cce2a'}\n\n```{.r .cell-code}\n# Convertig the rendered gifs to magick class-------------\n  a_mgif <- image_read(path = \"a_gif.gif\")\n  b_mgif <- image_read(path = \"b_gif.gif\")\n  c_mgif <- image_read(path = \"c_gif.gif\")\n```\n:::\n\nBy the reading the saved gif images (animations) using `magick::image_read()`, we convert the animation from the **gif_image** class to **magick-image** class.\n\n\n## Aligning the animations\n\nFinally, we combine the animations using a `for-loop` and `magick::image_append`:  \n\n\n::: {.cell hash='2020-09-13-combining-multiple-animations_cache/html/unnamed-chunk-1_c3fa59b60ef2229b4bc9c718ccf169f6'}\n\n```{.r .cell-code}\n# Aligning gifs-------------------------------------------------\n  bc_gif <- image_append(c(b_mgif[1], c_mgif[1]), stack = FALSE)\n  for(i in 2:50){\n    combined <- image_append(c(b_mgif[i], c_mgif[i]), stack = FALSE)\n    bc_gif <- c(bc_gif, combined)\n  }\n\n  new_gif <- image_append(c(a_mgif[1], bc_gif[1]), stack = TRUE)\n  for(i in 2:50){\n    combined <- image_append(c(a_mgif[i], bc_gif[i]), stack = TRUE)\n    new_gif <- c(new_gif, combined)\n  }\n\n new_gif\n```\n\n::: {.cell-output-display}\n![](2020-09-13-combining-multiple-animations_files/figure-html/unnamed-chunk-1-1.gif)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}